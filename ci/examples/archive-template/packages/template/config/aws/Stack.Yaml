---
Metadata:
    Validation: |
        aws cloudformation validate-template file://Stack.Yaml
    Generate-JSON: |
        aws cloudformation validate-template --template-body "file://Stack.Yaml"
    Create: |
        aws cloudformation create-stack \
            --stack-name "[Stack-Name]" \
                --template-body "file://Stack.Yaml" \
                --parameters "file://Parameters/Stack.json" \
                    --capabilities CAPABILITY_IAM
    Update: |
        aws cloudformation create-stack \
            --stack-name "[Stack-Name]" \
                --template-body "file://Stack.Yaml" \
                --parameters "file://Parameters/Stack.json" \
                    --capabilities CAPABILITY_IAM
    Decommission: |
        aws cloudformation delete-stack \
            --stack-name "[Stack-Name]"
    Wait: |
        aws cloudformation wait stack-[create|update|delete]-complete \
            --stack-name "[Stack-Name]"

Parameters:
    VPC:
        Type: "AWS::SSM::Parameter::Value<String>"
        Default: "Nexus-UI-Target-VPC"
        Description: "[SSM Parameter] Reference to Environment VPC-ID"
    Primary:
        Type: "AWS::SSM::Parameter::Value<String>"
        Default: "Nexus-UI-Subnet-A"
        Description: "[SSM Parameter] Reference to Environment VPC Subnet[0]"
    Secondary:
        Type: "AWS::SSM::Parameter::Value<String>"
        Default: "Nexus-UI-Subnet-B"
        Description: "[SSM Parameter] Reference to Environment VPC Subnet[1]"

    Zone:
        Type: "AWS::SSM::Parameter::Value<String>"
        Default: "Nexus-UI-FQDN-Name"
        Description: "Application + Service FQDN"

    Certificate:
        Type: "AWS::SSM::Parameter::Value<String>"
        Default: "/Cloud-Technology/Development/ECS/Nexus/Nexus-Cluster-TLS-Services-Certificate"
        Description: "AWS Issued SSL Certificate"

    Image:
        Type: "AWS::SSM::Parameter::Value<String>"
        Default: "Nexus-UI-Container-Image-ID"
        Description: "Container Registry AWS Reference-ID"

    Service:
        Type: "AWS::SSM::Parameter::Value<String>"
        Default: "Nexus-UI-Service-Name"
        Description: "Stack Application-Name or Service Alias"

    Port:
        Type: "AWS::SSM::Parameter::Value<String>"
        Default: "Nexus-UI-Container-Port"
        Description: "Forwarded Container Port"

    Listener:
        Type: "AWS::SSM::Parameter::Value<String>"
        Default: "Nexus-UI-ALB-Port"
        Description: "ALB Port"

    Subdomain:
        Type: "String"
        Default: "nexus"
        Description: "FQDN Subdomain"

    Health:
        Type: String
        Default: "/"

    Minimum:
        Type: Number
        Default: 2

    Maximum:
        Type: Number
        Default: 10

    Target:
        Type: Number
        Default: 100

Resources:
    Logging:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Join [ "-", [ !Ref Service, "Log-Group" ] ]

    DNS:
        Type: AWS::Route53::RecordSet
        Properties:
            Type: "A"
            HostedZoneName: !Join [ "", [ !Ref Zone, "." ] ]
            Name: !Join [ "", [ !Ref Subdomain, ".", !Ref Zone, "." ] ]
            AliasTarget:
                HostedZoneId: !GetAtt ELB.CanonicalHostedZoneID
                DNSName: !GetAtt ELB.DNSName

    Cluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Join [ "-", [ !Ref Service, "Cluster" ] ]
            CapacityProviders:
                - "FARGATE_SPOT"
            ClusterSettings:
                -   Name: "containerInsights"
                    Value: "enabled"

    Definition:
        Type: AWS::ECS::TaskDefinition
        DependsOn:
            - Logging
        Properties:
            Family: !Join [ "-", [ !Ref Service, "Task-Definition" ] ]
            NetworkMode: awsvpc # --> Fargate
            RequiresCompatibilities:
                - "FARGATE"
            # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
            # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
            # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
            # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
            # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
            Cpu: "256"
            # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
            # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
            # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
            # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
            # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
            Memory: "0.5GB"
            # A role needed by ECS.
            # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
            # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
            ExecutionRoleArn: !Ref Execution
            # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
            TaskRoleArn: !Ref Task
            ContainerDefinitions:
                -   Name: !Ref Service
                    Image: !Ref Image
                    PortMappings:
                        -   ContainerPort: !Ref Port
                    LogConfiguration:
                        LogDriver: "awslogs"
                        Options:
                            awslogs-region: !Ref AWS::Region
                            awslogs-group: !Ref Logging
                            awslogs-stream-prefix: "ecs"

    Execution:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Join [ "-", [ !Ref Service, "Execution-Role" ] ]
            AssumeRolePolicyDocument:
                Statement:
                    -   Effect: "Allow"
                        Principal:
                            Service: ecs-tasks.amazonaws.com
                        Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

    Task:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Join [ "-", [ !Ref Service, "Task-Role" ] ]
            AssumeRolePolicyDocument:
                Statement:
                    -   Effect: "Allow"
                        Principal:
                            Service: ecs-tasks.amazonaws.com
                        Action: "sts:AssumeRole"

    Scale:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Join [ "-", [ !Ref Service, "Auto-Scaling-Role" ] ]
            AssumeRolePolicyDocument:
                Statement:
                    -   Effect: "Allow"
                        Principal:
                            Service: ecs-tasks.amazonaws.com
                        Action: "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"

    SG:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: !Join [ "-", [ !Ref Service, "Container-Security-Group" ] ]
            VpcId: !Ref VPC
            SecurityGroupIngress:
                -   IpProtocol: "tcp"
                    FromPort: !Ref Port
                    ToPort: !Ref Port
                    SourceSecurityGroupId: !Ref ELBSG

    ELBSG:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: !Join [ "-", [ !Ref Service, "Load-Balancer-Security-Group" ] ]
            VpcId: !Ref VPC
            SecurityGroupIngress:
                -   IpProtocol: "tcp"
                    FromPort: !Ref Listener
                    ToPort: !Ref Listener
                    CidrIp: "0.0.0.0/0"

    Application:
        Type: AWS::ECS::Service
        DependsOn:
            - ELB
            - TG
        Properties:
            ServiceName: !Ref Service
            Cluster: !Ref Cluster
            TaskDefinition: !Ref Definition
            DeploymentConfiguration:
                MinimumHealthyPercent: 50
                MaximumPercent: 200
            DesiredCount: 1
            HealthCheckGracePeriodSeconds: 600
            LaunchType: "FARGATE"
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: "ENABLED"
                    Subnets:
                        - !Ref Primary
                        - !Ref Secondary
                    SecurityGroups:
                        - !Ref SG
            LoadBalancers:
                -   ContainerName: !Ref Service
                    ContainerPort: !Ref Port
                    TargetGroupArn: !Ref TG

    TG:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        DependsOn: # --> Race-Condition
            - ELB
        Properties:
            HealthCheckIntervalSeconds: 300
            HealthCheckPath: !Ref Health
            HealthCheckTimeoutSeconds: 300
            UnhealthyThresholdCount: 2
            HealthyThresholdCount: 1
            Name: !Join [ "-", [ !Ref Service, "Target-Group" ] ]
            Port: !Ref Port
            Protocol: "HTTP"
            TargetGroupAttributes:
                -   Key: deregistration_delay.timeout_seconds
                    Value: 300
            TargetType: "ip"
            VpcId: !Ref VPC

    Ingress:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                -   TargetGroupArn: !Ref TG
                    Type: "forward"
            LoadBalancerArn: !Ref ELB
            Port: !Ref Listener
            Protocol: "HTTPS"
            Certificates:
                -   CertificateArn: !Ref Certificate

    ELB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            LoadBalancerAttributes:
                -   Key: idle_timeout.timeout_seconds
                    Value: 300
            Name: !Join [ "-", [ !Ref Service, "Load-Balancer" ] ]
            Scheme: "internet-facing"
            SecurityGroups:
                - !Ref ELBSG
            Subnets:
                - !Ref Primary
                - !Ref Secondary

    Autoscaling:
        Type: AWS::ApplicationAutoScaling::ScalableTarget
        Properties:
            MinCapacity: !Ref Minimum
            MaxCapacity: !Ref Maximum
            ResourceId: !Join [ "/", [ service, !Ref Cluster, !GetAtt Application.Name ] ]
            ScalableDimension: "ecs:service:DesiredCount"
            ServiceNamespace: "ecs"
            RoleARN: !GetAtt Scale.Arn

    Policy:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Properties:
            PolicyName: !Join [ "-", [ !Ref Service, "Auto-Scaling-Policy" ] ]
            PolicyType: "TargetTrackingScaling"
            ScalingTargetId: !Ref Autoscaling
            TargetTrackingScalingPolicyConfiguration:
                PredefinedMetricSpecification:
                    PredefinedMetricType: "ECSServiceAverageCPUUtilization"
                ScaleInCooldown: 30
                ScaleOutCooldown: 10
                TargetValue: !Ref Target

    # SSL:
    #     Type: AWS::CertificateManager::Certificate
    #     Properties:
    #         DomainName: !Ref DNS
    #         DomainValidationOptions:
    #             -   DomainName: !Ref DNS
    #                 ValidationDomain: !Ref DNS

    # Parameter:
    #     Type: AWS::SSM::Parameter
    #     DependsOn: # --> Race-Condition
    #         - SSL
    #     Properties:
    #         Name: !Ref Certificate
    #         Type: !GetAtt Certificate.Type
    #         Value: !GetAtt Certificate.Value
    #         Tier: Standard
    #         Description: "AWS Issued SSL Certificate"

Outputs:
    Endpoint:
        Description: Endpoint
        Value: !Join [ "", [ "https://", !Ref DNS ] ]
