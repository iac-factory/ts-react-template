AWSTemplateFormatVersion: "2010-09-09"

Description: |
    GitLab EKS Cluster

    @Task-Board
    - [ ] Once Establishing a Deployed, Healthy CFN-Stack, Modify the
            Associated Cluster's *Imported Security-Group until an
            Established Lowest-Common-Denominator is Found.
        - [ ] Once the LCD Permissions are Determined, Remove "Security"
                as an Input Parameter, and rather, Create the Desired
                Security-Group and add Waiters to the Applicable, Dependent
                Resources.

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -   Label:
                    default: "Intended Deployment, VPC-Isolated Alias"
                    Parameters:
                        - Environment
            -   Label:
                    default: "Functional Purpose"
                    Parameters:
                        - Purpose
            -   Label:
                    default: "EKS Cluster"
                    Parameters:
                        - Stack
                        - Authoritarian
                        - Version
                        - Security
            -   Label:
                    default: "Node Configuration"
                    Parameters:
                        - Capacity
                        - Type
                        - Parameter
                        - Storage
                        - SSH
            -   Label:
                    default: "Network Configuration"
                    Parameters:
                        - VPC
                        - Subnets

Parameters:
    # @Task - Documentation

    # @Task - Certificate SSM Output ...
    # ... Certificate:
    # ...     Type: AWS::SSM::Parameter
    # ...     Properties:
    # ...         # ... AllowedPattern: String
    # ...         DataType: "text"
    # ...         Description: "K8s, EKS Cluster Signing Certificate"
    # ...         Name: Sub! "/${Organization}/..."
    # ...         Tags:
    # ...             Environment: Sub! "${}"
    # ...         Tier: String
    # ...         Type: String
    # ...         Value: String

    Organization:
        Description: "Company, Client, or FQDN Name (Discouraged) Alias"
        Type: String
        Default: "Cloud-Technology"
        AllowedValues:
            - "Artifacts-Network"
            - "Cloud-Technology"
            - "Cloud-Hybrid"

    Name:
        Description: "Application or Service Short-Name"
        Type: String
        Default: "Nexus"

    Stack:
        Description: "Unique EKS Cluster Name"
        Type: String
        Default: "K8s-EKS-Service"

    Environment:
        Description: "Intended Deployment Target VPC Common-Name"
        Type: String
        Default: "Development"
        AllowedValues: [
                "Development", "Certificate", "QA",     # --> VPC (1)
                "Staging", "UAT", "Pre-Production",     # --> VPC (2)
                "Production"                # --> VPC (3)
        ]

    Purpose:
        Description: "Resource Purpose Singleton"
        Type: String
        Default: "Internal"
        AllowedValues:
            - "Private"
            - "Internal"
            - "Public"

            - "Migration"
            - "Monitoring"
            - "Development"
            - "Notification"
            - "Distribution"
            - "Health-Checking"

            - "Cross-Environment"

            - "Continuous-Integration" # --> Tooling
            - "Continuous-Development" # --> VCS + Pipelining
            - "Continuous-Deployment"  # --> Managed Service(s)
            - "Continuous-Delivery"    # --> Client Distributable

            - "Legacy" # --> Immutable (Read-Only)

    Version:
        Description: "Kubernetes Version Installation Target"
        Type: String
        Default: "1.20"
        AllowedValues: [ "1.20", "1.19", "1.18", "1.17", "1.16" ]

    SSH: # @Task ... Default: "Default-API-EKS-Instance-Key"
        Description: "The EC2 Key Pair to allow SSH Access to the Node Instances"
        Type: AWS::EC2::KeyPair::KeyName
        Default: "Nexus-API-EKS-Instance-Key"

    Parameter:
        Description: "AWS Systems Manager Parameter Store parameter of the AMI ID for the Worker Mode Instance Image-ID"
        Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
        Default: "/aws/service/eks/optimized-ami/1.15/amazon-linux-2/recommended/image_id"

    Type:
        Description: "EC2 Instance Type"
        Type: String
        Default: "t3.small"
        ConstraintDescription: "Must Have a Valid EC2-Instance-Type - https://aws.amazon.com/ec2/instance-types"
        AllowedValues: [
                "t2.small",    "t2.medium",     "t2.large",     "t2.xlarge",    "t2.2xlarge",    "t3.nano",     "t3.micro",         "t3.small",
                "t3.medium",   "t3.large",      "t3.xlarge",    "t3.2xlarge",   "m3.medium",     "m3.large",    "m3.xlarge",        "m3.2xlarge",
                "m4.large",    "m4.xlarge",     "m4.2xlarge",   "m4.4xlarge",   "m4.10xlarge",   "m5.large",    "m5.xlarge",        "m5.2xlarge",
                "m5.4xlarge",  "m5.12xlarge",   "m5.24xlarge",  "c4.large",     "c4.xlarge",     "c4.2xlarge",  "c4.4xlarge",       "c4.8xlarge",
                "c5.large",    "c5.xlarge",     "c5.2xlarge",   "c5.4xlarge",   "c5.9xlarge",    "c5.18xlarge", "i3.large",         "i3.xlarge",
                "i3.2xlarge",  "i3.4xlarge",    "i3.8xlarge",   "i3.16xlarge",  "r3.xlarge",     "r3.2xlarge",  "r3.4xlarge",       "r3.8xlarge",
                "r4.large",    "r4.xlarge",     "r4.2xlarge",   "r4.4xlarge",   "r4.8xlarge",    "r4.16xlarge", "x1.16xlarge",      "x1.32xlarge",
                "p2.xlarge",   "p2.8xlarge",    "p2.16xlarge",  "p3.2xlarge",   "p3.8xlarge",    "p3.16xlarge", "p3dn.24xlarge",    "r5.large",
                "r5.xlarge",   "r5.2xlarge",    "r5.4xlarge",   "r5.12xlarge",  "r5.24xlarge",   "r5d.large",   "r5d.xlarge",       "r5d.2xlarge",
                "r5d.4xlarge", "r5d.12xlarge",  "r5d.24xlarge", "z1d.large",    "z1d.xlarge",    "z1d.2xlarge", "z1d.3xlarge",      "z1d.6xlarge",
                "z1d.12xlarge"
        ]
    Capacity:
        Description: "Desired Capacity of Node Group Auto-Scaling"
        Type: Number
        Default: "3"

    Storage:
        Description: "Node Volume Size"
        Type: Number
        Default: "20"

    Authoritarian:
        Description: "The IAM Role to Permit Communication between Amazon EKS and the Kubernetes Control Panel"
        Type: String
        Default: "arn:aws:iam::983281742669:role/Cloud-Technology-GitLab-EKS"

    Security:
        Description: "The EKS-managed Elastic Network Interfaces within the Worker-Nodes' Subnets"
        Type: AWS::EC2::SecurityGroup::Id
        Default: "sg-0213ebb7f4ea54257"

    VPC:
        Description: "AWS Cloud Environment VPC-ID"
        Type: AWS::EC2::VPC::Id
        Default: "vpc-a2fe3dc9"

    Subnets:
        Description: "VPC-Specific Subnet Listing"
        Type: List<AWS::EC2::Subnet::Id>
        Default: "subnet-35fe7679,subnet-61ba9b1b"

Resources:
    Logging:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Join [ "-", [ !Ref Stack, "Log-Group" ] ]

    #    DNSRecord:
    #        Type: AWS::Route53::RecordSet
    #        Properties:
    #            Type: "A"
    #            HostedZoneName: !Join [ "", [ !Ref HostedZoneName, "." ] ]
    #            Name: !Join [ "", [ !Ref Subdomain, ".", !Ref HostedZoneName, "." ] ]
    #            AliasTarget:
    #                HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
    #                DNSName: !GetAtt LoadBalancer.DNSName
    #
    Cluster:
        Type: AWS::EKS::Cluster
        Properties:
            Name: !Sub "${Stack}-EKS-Cluster"
            Version: !Sub "${Version}"
            RoleArn: !Sub "${Authoritarian}"
            ResourcesVpcConfig:
                SecurityGroupIds:
                    - !Ref Security
                SubnetIds: !Ref Subnets

    Profile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: "/"
            Roles:
                - !Ref Role

    Role:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: "Allow"
                        Principal:
                            Service:
                                - "ec2.amazonaws.com"
                        Action:
                            - "sts:AssumeRole"
            Path: "/"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
                - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
                - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"

    Group:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Security group for all nodes in the cluster
            VpcId: !Ref VPC
            Tags:
                -   Key: !Sub kubernetes.io/cluster/${Stack}
                    Value: owned

    Internetwork:
        Type: AWS::EC2::SecurityGroupIngress
        DependsOn: Group
        Properties:
            Description: Allow nodes to communicate with each other
            GroupId: !Ref Group
            SourceSecurityGroupId: !Ref Group
            IpProtocol: -1
            FromPort: 0
            ToPort: 65535

    Ingress:
        Type: AWS::EC2::SecurityGroupIngress
        DependsOn: Group
        Properties:
            Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
            GroupId: !Ref Group
            SourceSecurityGroupId: !Ref Security
            IpProtocol: tcp
            FromPort: 1025
            ToPort: 65535

    Egress:
        Type: AWS::EC2::SecurityGroupEgress
        DependsOn: Group
        Properties:
            Description: Allow the cluster control plane to communicate with worker Kubelet and pods
            GroupId: !Ref Security
            DestinationSecurityGroupId: !Ref Group
            IpProtocol: tcp
            FromPort: 1025
            ToPort: 65535

    Encryption:
        Type: AWS::EC2::SecurityGroupIngress
        DependsOn: Group
        Properties:
            Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
            GroupId: !Ref Group
            SourceSecurityGroupId: !Ref Security
            IpProtocol: tcp
            FromPort: 443
            ToPort: 443

    Termination:
        Type: AWS::EC2::SecurityGroupEgress
        DependsOn: Group
        Properties:
            Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
            GroupId: !Ref Security
            DestinationSecurityGroupId: !Ref Group
            IpProtocol: tcp
            FromPort: 443
            ToPort: 443

    API:
        Type: AWS::EC2::SecurityGroupIngress
        DependsOn: Group
        Properties:
            Description: Allow pods to communicate with the cluster API Server
            GroupId: !Ref Security
            SourceSecurityGroupId: !Ref Group
            IpProtocol: tcp
            ToPort: 443
            FromPort: 443

    Nodes:
        Type: AWS::AutoScaling::AutoScalingGroup
        DependsOn: Cluster
        Properties:
            DesiredCapacity: !Ref Capacity
            LaunchConfigurationName: !Ref Launcher
            MinSize: !Ref Capacity
            MaxSize: !Ref Capacity
            VPCZoneIdentifier: !Ref Subnets
            Tags:
                -   Key: Name
                    Value: !Sub "${Name}-${Stack}-${Environment}-Node"
                    PropagateAtLaunch: true
                -   Key: !Sub "kubernetes.io/cluster/${Name}-${Stack}-${Environment}"
                    Value: "Owned"
                    PropagateAtLaunch: true
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MaxBatchSize: 1
                MinInstancesInService: !Ref Capacity
                PauseTime: PT5M

    Launcher:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            AssociatePublicIpAddress: true
            IamInstanceProfile: !Ref Profile
            ImageId: !Ref Parameter
            InstanceType: !Ref Type
            KeyName: !Ref SSH
            SecurityGroups:
                - !Ref Group
            BlockDeviceMappings:
                -   DeviceName: /dev/xvda
                    Ebs:
                        VolumeSize: !Ref Storage
                        VolumeType: gp2
                        DeleteOnTermination: true
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    set -o xtrace

                    /etc/eks/bootstrap.sh "${Stack}"
                    /opt/aws/bin/cfn-signal --exit-code $?  \
                        --stack "${AWS::StackName}"         \
                            --resource Nodes                \
                                --region "${AWS::Region}"

Outputs:
    Role:
        Description: "IAM Security Associations for All Node Instances via Role Resource"
        Value: !GetAtt Role.Arn
        Export:
            Name: !Sub "${AWS::StackName}-Role"

    Endpoint:
        Description: "The Encrypted, TLS Protected Cluster Endpoint"
        Value: !GetAtt Cluster.Endpoint
        Export:
            Name: !Sub "${AWS::StackName}-Endpoint"

    Certificate: # --> Cannot Export Value >= 1024 Bytes
        Description: "The Cluster's Signing + Authority Certificate"
        Value: !GetAtt Cluster.CertificateAuthorityData
        # ... Export:
        # ... Name: !Sub "${AWS::StackName}-Certificate"
