Index: src/pages/home/content/components/table/component.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/home/content/components/table/component.tsx b/src/pages/home/content/components/table/component.tsx
--- a/src/pages/home/content/components/table/component.tsx	
+++ b/src/pages/home/content/components/table/component.tsx	(date 1655452653540)
@@ -11,7 +11,6 @@
 
 import styles from "./index.module.scss";
 import CXS from "classnames/bind";
-
 const CX = CXS.bind( styles );
 
 const Identifier = "table";
@@ -24,7 +23,7 @@
 export module Generator {
     export interface Input {
         Headers: { identifier: string, cells: { header: string }[], toolbar: [ { count: number; }, React.Dispatch<boolean> ], isAllChecked: boolean, handleCheckAll: React.Dispatch<boolean> };
-        Body: { handleCheck: ( event: { target: React.HTMLAttributes<HTMLInputElement> & { checked: boolean } } ) => void, isChecked: string[], cells: { title: string, value?: string }[] };
+        Body: { handleCheck: (event: {target: React.HTMLAttributes<HTMLInputElement> & { checked: boolean }}) => void, isChecked: string[], cells: { title: string, value?: string }[] };
         Footer: { cells: { header: string }[] };
     }
 
@@ -116,11 +115,9 @@
 
     const [ total, setTotal ] = React.useState( Data.length );
 
-    const [ list, setList ] = React.useState( [] );
+    const hydration = React.useCallback( ( total: number ) => User.generate( total ), [] );
 
-    const hydration = Data //User.generate( total ) //React.useCallback( ( total: number ) => User.generate( total ), [] );
-
-    // const users = React.useMemo( () => hydration( total ), [ total ] );
+    const users = React.useMemo( () => hydration( total ), [ total ] );
 
     const [ isCheckAll, setIsCheckAll ] = React.useState( false );
     const [ isCheck, setIsCheck ] = React.useState( [] );
@@ -129,15 +126,15 @@
         const { id } = event.target;
         const { checked } = event.target;
 
-        setIsCheck( [ ...isCheck, id ] );
+        setIsCheck( [ ... isCheck, id ] );
         if ( !checked ) {
-            setIsCheck( isCheck.filter( ( item ) => item !== id ) );
+            setIsCheck( isCheck.filter( (item) => item !== id ) );
         }
     };
 
-    const handleSelectAll = ( event ) => {
+    const handleSelectAll = e => {
         setIsCheckAll( !isCheckAll );
-        setIsCheck( list.map( ( element ) => ( element as User.Type ).id ) );
+        setIsCheck( users.map( (user) => (user as User.Type).id ) );
 
         if ( isCheckAll ) {
             setIsCheck( [] );
@@ -168,7 +165,7 @@
         ]
     } );
 
-    const Body = Generator.Content( list, {
+    const Body = Generator.Content( users, {
         isChecked: isCheck,
         handleCheck: handleCheck,
         cells: [
@@ -201,10 +198,6 @@
         ]
     } );
 
-    React.useEffect( () => {
-        setList( hydration );
-    }, [ list ] );
-
     return (
         <>
             <Tabular className={ classes } id={ Identifier } toolbar={ toolbar }>
